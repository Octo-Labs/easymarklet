(function(){

  var Easymarklet = window.Easymarklet || {}

  Easymarklet.Consumer = function(bookmarklet){
    if(bookmarklet == null){ alert('You must pass some bookmarklet to Easymarklet.Consumer.'); return;}
    if(bookmarklet.consumer == null){ alert('Your bookmarklet definition is missing a consumer.'); return; }
    if(bookmarklet.producer == null){ alert('Your bookmarklet definition is missing a producer.'); return; }

    var _this = this;
    _this.producer = null;
    //console.log('Easymarklet.Consumer : init');
    var bookmarklet = bookmarklet
    var s1, s2, isLoaded = false, xhr, head = document.getElementsByTagName('head')[0];
    var easymarkletDiv = null;

    var consumer_url = encodeURIComponent(document.location);
    var protocol = 'http://'
    var host = '<%= Rails.application.config.action_controller.default_url_options[:host] %>';
    var port = '<%= Rails.application.config.action_controller.default_url_options[:port] %>';
    port = port === '' ? '' : ':' + port;
    var full_host = protocol + host + port;

    // Once easyXDM is available this will create an iframe and set up the RPC channel
    function scriptOnLoad(){
        
        if (isLoaded || typeof easyXDM === "undefined" || typeof JSON === "undefined") {
            return;
        }
        isLoaded = true;
        
        if(bookmarklet.visible){
          easymarkletDiv = document.createElement('div');
          easymarkletDiv.id = "easymarklet_div";
          easymarkletDiv.className = 'easymarklet_iframe_div';
          //easymarkletDiv.appendChild(document.createTextNode("Loading bookmarklet"));
          document.body.appendChild(easymarkletDiv);
        }

        //var dest = full_host + "/bookmarklet_frame?dest=";
        //dest += encodeURIComponent("/bookmarklet/court_cases/check?court_case[url]=" + caseUrl);
        
        var dest = full_host + bookmarklet.producer.path
        
        // here we put the main code, in this case we expose an ajax endpoint
        _this.producer = new easyXDM.Rpc({
          remote: dest,
          container: easymarkletDiv,
          onReady: function(){
            if(bookmarklet.consumer.init){
              bookmarklet.consumer.init();
            }
                //xhr.post("example/glossary.php", {
                //    param1: "a",
                //    param2: "b"
                //}, function(json){
                //    alert(json.glossary.title);
                //});
            }
        }, _this.createRpcConfig() /*{
          remote: {
            
                post: {}
            },
            local : {
              alertMessage: {
                method : function(msg){
                    alert(msg);
                }
              },
              closeFrame: {
                method : function(){
                  //alert('closing!');
                  var cdiv = document.getElementById('bookmarklet_div');
                  cdiv.parentNode.removeChild(cdiv);
                }
              },
              resizeFrame : {
                method : function(height){
                  //console.log("resizing outter frame : " + height);
                  var cdiv = document.getElementById('bookmarklet_div');
                  //console.log(cdiv);
                  //console.log(cdiv.style)
                  cdiv.style.height = height + "px";
                  cdiv.getElementsByTagName("iframe")[0].style.height = height + "px";
                }
              }
            }
        }*/
      );
    }

    this.loadEasyXdmLib = function(){
      // load easyXDM
      s1 = document.createElement("script");
      s1.type = "text/javascript";
      s1.src = full_host + "/assets/easyXDM.js";
      s1.onreadystatechange = function(){
          if (this.readyState === "complete" || this.readyState === "loaded") {
              scriptOnLoad();
          }
      };
      s1.onload = scriptOnLoad;
      head.appendChild(s1);
    }
    
    this.loadJsonLib = function(){
      // load JSON if needed
      if (typeof JSON === "undefined" || !JSON) {
          s2 = document.createElement("script");
          s2.type = "text/javascript";
          s2.src = full_host + "/assets/json2.js";
          s2.onreadystatechange = function(){
              if (this.readyState === "complete" || this.readyState === "loaded") {
                  scriptOnLoad();
              }
          };
          s2.onload = scriptOnLoad;
          head.appendChild(s2);
      }
    }

    this.loadCss = function(){
      //Load the css   
      bookmarklet.consumer.css = [].concat(bookmarklet.consumer.css)
      for(var i = 0; i<bookmarklet.consumer.css.length; i++){
        var src = bookmarklet.consumer.css[i]
        var css = document.createElement('LINK');
        css.href = full_host + src;
        css.type = 'text/css';
        css.media = 'screen';
        css.rel = 'stylesheet';
        head.appendChild(css); 
      }
    }

    this.init = function(){
      this.loadEasyXdmLib();
      this.loadJsonLib();
      this.loadCss();
    }

    this.createRpcConfig = function(){
      var rpcConfig = {};

      rpcConfig.local = {};
      for (var key in bookmarklet.consumer.methods) {
        if (bookmarklet.consumer.methods.hasOwnProperty(key)) {
          //console.log(key);
          rpcConfig.local[key] = bookmarklet.consumer.methods[key];
        }
      }
      rpcConfig.local.closeFrame = this.closeFrame;

      rpcConfig.remote = {};
      for (var key in bookmarklet.producer.methods) {
        if (bookmarklet.producer.methods.hasOwnProperty(key)) {
          //console.log(key);
          rpcConfig.remote[key] = {}; //We just stub these since they're not called on this side
        }
      }

      return rpcConfig;
    }

    this.closeFrame = function(){
      if(easymarkletDiv){
        easymarkletDiv.parentNode.removeChild(easymarkletDiv)
      }
    }

    this.resizeFrame = function(height){
      easymarkletDiv.style.height = height + "px";
      easymarkletDiv.getElementsByTagName("iframe")[0].style.height = height + "px";
    }

  } // Easymarklet.Consumer = function(){

  
  // Now expose the Easymarklet to the global object
  window.Easymarklet = Easymarklet;
     
        
})();

